name: Docker Build CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron:  '0 12 * * *'
  workflow_dispatch:

env:
  GITHUB_PKG_REPO: "docker.pkg.github.com"
  IMAGE_NAME: "${{ github.repository }}"
  DOCKER_BUILDKIT: "1"
  GHP_USER: "${{ github.actor }}"
  GHP_TOKEN: "${{ github.token }}"

jobs:
  env:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set Environment
        id: set-env
        run: |
          if [ "$GITHUB_HEAD_REF" != "" ]
          then
            echo "PR時はソースブランチ名がタグ名になります。"
            TAG_NAME=$GITHUB_HEAD_REF
          else
            echo "PR以外の時はベースブランチ名がタグ名になります。"
            TAG_NAME=${GITHUB_REF##*/}
          fi
          echo "::set-output name=IMAGE_IDENTITY::${GITHUB_PKG_REPO}/${IMAGE_NAME}/grav:${TAG_NAME}"
    outputs:
      IMAGE_IDENTITY: ${{ steps.set-env.outputs.IMAGE_IDENTITY }}
  
  build:
    runs-on: ubuntu-latest
    needs: env
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v2
        with:
          path: out.tar
          key: docker-save-${{ hashFiles('Dockerfile') }}

      - name: Login GitHub Package
        run: echo $GHP_TOKEN | docker login $GITHUB_PKG_REPO -u $GHP_USER --password-stdin

      - name: Build the Docker image
        run: |
          docker build . -f Dockerfile --tag "${{needs.env.outputs.IMAGE_IDENTITY}}"
          docker save "${{needs.env.outputs.IMAGE_IDENTITY}}" > out.tar
          docker load --input out.tar
      
      - uses: actions/upload-artifact@v2
        with:
          name: docker
          path: out.tar

  hadolint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Hadolint the Dockerfile
        run: docker run --rm -i -v $PWD/.hadolint.yaml:/root/.config/hadolint.yaml hadolint/hadolint < Dockerfile

  test-non-existing-directory:
    runs-on: ubuntu-latest
    needs: 
    - env
    - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: docker
      - name: Load Docker image from artifacts
        run: docker load --input out.tar

      - name: Test the Docker image
        env:
          MAX_RETRY: "5"
          count: "0"
          SUCCESS: "false"
        run: |
          echo "mount test: non-existing directory..."
          mkdir /tmp/_user
          sudo chown 101:82 /tmp/_user
          docker run --name test -d -p 9000:8080 -v /tmp/_user:/sync/user "${{needs.env.outputs.IMAGE_IDENTITY}}"

          while [ $count -lt $MAX_RETRY ]
          do
            sleep 3
            curl -L --head http://localhost:9000 | grep "HTTP/1.1 200 OK" && exit 0
            docker logs test
            count=$((++count))
          done
          exit 1

  test-mount-existing-dir:
    runs-on: ubuntu-latest
    needs: 
    - env
    - build
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/download-artifact@v2
        with:
          name: docker

      - name: Load Docker image from artifacts
        run: docker load --input out.tar

      - name: Test the Docker image
        env:
          MAX_RETRY: "5"
          count: "0"
          SUCCESS: "false"
        run: |
          echo "mount test: existing directory..."
          sudo chown 101:82 $PWD/grav/user
          docker run --name test -d -p 9000:8080 -v $PWD/grav/user:/sync/user "${{needs.env.outputs.IMAGE_IDENTITY}}"

          while [ $count -lt $MAX_RETRY ]
          do
            sleep 3
            curl -L --head http://localhost:9000 | grep "HTTP/1.1 200 OK" && exit 0
            docker logs test
            count=$((++count))
          done
          exit 1

  test-dev-plugin-install:
    runs-on: ubuntu-latest
    needs: 
    - env
    - build
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/download-artifact@v2
        with:
          name: docker

      - name: Load Docker image from artifacts
        run: docker load --input out.tar

      - name: Test the Docker image
        env:
          MAX_RETRY: "5"
          count: "0"
          SUCCESS: "false"
        run: |
          echo "mount test: existing directory..."
          docker run --name test -e STG_PLUGIN_INSTALL=true -d -p 9000:8080 -v $PWD/grav/user:/sync/user "${{needs.env.outputs.IMAGE_IDENTITY}}"

          while [ $count -lt $MAX_RETRY ]
          do
            sleep 3
            curl -L --head http://localhost:9000 | grep "HTTP/1.1 200 OK" && exit 0
            docker logs test
            count=$((++count))
          done
          exit 1

  trivy-scan:
    runs-on: ubuntu-latest
    needs: 
    - env
    - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: docker
      - name: Load Docker image from artifacts
        run: docker load --input out.tar
      - name: Scan image
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${HOME}/.cache:/root/.cache aquasec/trivy:latest --exit-code 0 "${{needs.env.outputs.IMAGE_IDENTITY}}"

  inspect:
    runs-on: ubuntu-latest
    needs: 
    - env
    - build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: docker
      - name: Load Docker image from artifacts
        run: docker load --input out.tar
      - name: Inspect image
        run: docker inspect "${{needs.env.outputs.IMAGE_IDENTITY}}"


  push-githubpackage:
    runs-on: ubuntu-latest
    needs: 
    - env
    - hadolint
    - test1
    - test2
    - trivy-scan
    - inspect
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: docker

      - name: Login GitHub Package
        run: echo $GHP_TOKEN | docker login $GITHUB_PKG_REPO -u $GHP_USER --password-stdin

      - name: Load Docker image from artifacts
        run: docker load --input out.tar

      - name: Push Github Package
        run: |
          echo "docker push ${{needs.env.outputs.IMAGE_IDENTITY}}"
          docker push "${{needs.env.outputs.IMAGE_IDENTITY}}"

  k8s-manifest-test:
    name: kubernetes manifest test
    runs-on: ubuntu-latest
    needs: 
    - push-githubpackage
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.16.0'
          kubernetes version: 'v1.19.2'
          github token: ${{ secrets.GITHUB_TOKEN }}

      - name: setup namespace & registry token
        run: |
          kubectl create namespace grav
          kubectl create secret docker-registry github-registry \
            --docker-server=docker.pkg.github.com \
            --docker-username=$GHP_USER --docker-password=$GHP_TOKEN \
            --docker-email=email-address@address \
            -n grav
      
      - name: kustomize install
        run: |
          curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.9.2/kustomize_v3.9.2_linux_amd64.tar.gz -O
          tar xvfz kustomize_v3.9.2_linux_amd64.tar.gz
          ./kustomize version
      
      - name: kustomize build test
        run: |
          ./kustomize build manifest/overlays/local > manifest.local.yaml
          ./kustomize build manifest/overlays/minikube > manifest.minikube.yaml 
          ./kustomize build manifest/overlays/production > manifest.production.yaml

      - name: Apply test
        run: |
          kubectl apply -f manifest.minikube.yaml